// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: transmission.proto

package transmission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransmissionService_UploadObject_FullMethodName   = "/rpc.transmission.TransmissionService/UploadObject"
	TransmissionService_DownloadObject_FullMethodName = "/rpc.transmission.TransmissionService/DownloadObject"
)

// TransmissionServiceClient is the client API for TransmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransmissionServiceClient interface {
	UploadObject(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadObjectRequestChunk, UploadObjectResponse], error)
	DownloadObject(ctx context.Context, in *DownloadObjectRequest, opts ...grpc.CallOption) (*DownloadObjectResponse, error)
}

type transmissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransmissionServiceClient(cc grpc.ClientConnInterface) TransmissionServiceClient {
	return &transmissionServiceClient{cc}
}

func (c *transmissionServiceClient) UploadObject(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadObjectRequestChunk, UploadObjectResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransmissionService_ServiceDesc.Streams[0], TransmissionService_UploadObject_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadObjectRequestChunk, UploadObjectResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransmissionService_UploadObjectClient = grpc.ClientStreamingClient[UploadObjectRequestChunk, UploadObjectResponse]

func (c *transmissionServiceClient) DownloadObject(ctx context.Context, in *DownloadObjectRequest, opts ...grpc.CallOption) (*DownloadObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadObjectResponse)
	err := c.cc.Invoke(ctx, TransmissionService_DownloadObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransmissionServiceServer is the server API for TransmissionService service.
// All implementations must embed UnimplementedTransmissionServiceServer
// for forward compatibility.
type TransmissionServiceServer interface {
	UploadObject(grpc.ClientStreamingServer[UploadObjectRequestChunk, UploadObjectResponse]) error
	DownloadObject(context.Context, *DownloadObjectRequest) (*DownloadObjectResponse, error)
	mustEmbedUnimplementedTransmissionServiceServer()
}

// UnimplementedTransmissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransmissionServiceServer struct{}

func (UnimplementedTransmissionServiceServer) UploadObject(grpc.ClientStreamingServer[UploadObjectRequestChunk, UploadObjectResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadObject not implemented")
}
func (UnimplementedTransmissionServiceServer) DownloadObject(context.Context, *DownloadObjectRequest) (*DownloadObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadObject not implemented")
}
func (UnimplementedTransmissionServiceServer) mustEmbedUnimplementedTransmissionServiceServer() {}
func (UnimplementedTransmissionServiceServer) testEmbeddedByValue()                             {}

// UnsafeTransmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransmissionServiceServer will
// result in compilation errors.
type UnsafeTransmissionServiceServer interface {
	mustEmbedUnimplementedTransmissionServiceServer()
}

func RegisterTransmissionServiceServer(s grpc.ServiceRegistrar, srv TransmissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransmissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransmissionService_ServiceDesc, srv)
}

func _TransmissionService_UploadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransmissionServiceServer).UploadObject(&grpc.GenericServerStream[UploadObjectRequestChunk, UploadObjectResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransmissionService_UploadObjectServer = grpc.ClientStreamingServer[UploadObjectRequestChunk, UploadObjectResponse]

func _TransmissionService_DownloadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransmissionServiceServer).DownloadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransmissionService_DownloadObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransmissionServiceServer).DownloadObject(ctx, req.(*DownloadObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransmissionService_ServiceDesc is the grpc.ServiceDesc for TransmissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransmissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.transmission.TransmissionService",
	HandlerType: (*TransmissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadObject",
			Handler:    _TransmissionService_DownloadObject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadObject",
			Handler:       _TransmissionService_UploadObject_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "transmission.proto",
}
